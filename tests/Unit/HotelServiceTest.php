<?php

namespace Tests\Unit;

use App\Entities\Hotel;
use App\Exceptions\HotelException;
use App\Repositories\HotelRepository;
use App\Services\Hotel\Facility;
use App\Services\Hotel\Location;
use App\Services\HotelService;
use Faker\Factory;
use Tests\TestCase;

/**
 * Class HotelServiceTest
 * @package Tests\Unit
 * @covers \App\Services\HotelService
 */
class HotelServiceTest extends TestCase
{
    /* @var $target HotelService */
    private $target;
    /* @var $repoMock HotelRepository */
    private $repoMock;
    /* @var $facility Facility */
    private $facilityMock;
    /* @var $location Location */
    private $locationMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->repoMock     = \Mockery::mock(HotelRepository::class);
        $this->facilityMock = \Mockery::mock(Facility::class);
        $this->locationMock = \Mockery::mock(Location::class);
        $this->target       = new HotelService($this->repoMock, $this->locationMock, $this->facilityMock);
        $this->faker        = Factory::create('en_US');
    }

    /**
     * @covers \App\Services\HotelService::getHotel
     */
    public function testGetHotel()
    {
        // Test Exception
        $this->repoMock->shouldReceive('getByUrlId')
            ->once()
            ->andReturn(null);

        try {
            $this->target->getHotel($this->faker->regexify('[A-Z0-9]{6}'));
        } catch (HotelException $e) {
            $this->assertSame(HotelException::NOT_FOUND, $e->getMessage());
        }

        // Test Correct Result
//        $expected = [
//            'urlId'        => '',
//            'name'         => [
//                'origin'     => '',
//                'translated' => ''
//            ],
//            'introduction' => '',
//            'location'     => [
//                'country' => [
//                    'id'   => 0,
//                    'name' => ''
//                ],
//                'city'    => [
//                    'id'   => 0,
//                    'name' => ''
//                ],
//                'address' => '',
//                'geo'     => [
//                    'longitude' => 0.0,
//                    'latitude'  => 0.0
//                ]
//            ]
//        ];

        $seeder = \HotelSeeder::getSeeder([
            'id'         => 1,
            'country_id' => 1
        ]);

        $this->repoMock->shouldReceive('getByUrlId')
            ->once()
            ->andReturn(new Hotel($seeder));

        $this->locationMock->shouldReceive('getLocation')
            ->once()
            ->andReturn([
                'country' => [
                    'id' => 1,
                    'name' => [
                        'origin' => '',
                        'en' => '',
                        'tw' => '',
                    ]
                ],
                'city' => [
                    'id' => 1,
                    'name' => [
                        'origin' => '',
                        'en' => '',
                        'tw' => '',
                    ]
                ]
            ]);

        $actual = $this->target->getHotel($this->faker->regexify('[A-Z0-9]{6}'));

        $this->assertIsArray($actual);
//        $this->assertEmpty(array_diff($this->getArrayKeys($expected), $this->getArrayKeys($actual)));
    }

//    private function getArrayKeys(array $array)
//    {
//        $keys = [];
//
//        foreach ($array as $key => $value) {
//            $keys[] = $key;
//
//            if (is_array($value)) {
//                $keys = array_merge($keys, $this->getArrayKeys($value));
//            }
//        }
//
//        return $keys;
//    }
}