<?php

namespace Tests\Unit;

use App\Entities\Hotel;
use App\Exceptions\HotelException;
use App\Repositories\HotelRepository;
use App\Services\Hotel\Facility;
use App\Services\Hotel\Location;
use App\Services\HotelService;
use Faker\Factory;
use Tests\TestCase;

/**
 * Class HotelServiceTest
 * @package Tests\Unit
 * @covers \App\Services\HotelService
 */
class HotelServiceTest extends TestCase
{
    /* @var $target HotelService */
    private $target;
    /* @var $repoMock HotelRepository */
    private $repoMock;
    /* @var $facility Facility */
    private $facilityMock;
    /* @var $location Location */
    private $locationMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->repoMock     = \Mockery::mock(HotelRepository::class);
        $this->facilityMock = \Mockery::mock(Facility::class);
        $this->locationMock = \Mockery::mock(Location::class);
        $this->target       = new HotelService($this->repoMock, $this->locationMock, $this->facilityMock);
        $this->faker        = Factory::create('en_US');
    }

    /**
     * @covers \App\Services\HotelService::getHotel
     */
    public function testGetHotel()
    {
        // Test Exception
        $this->repoMock->shouldReceive('getByUrlId')
            ->once()
            ->andReturn(null);

        try {
            $this->target->getHotel($this->faker->regexify('[A-Z0-9]{5}'));
        } catch (HotelException $e) {
            $this->assertSame(HotelException::NOT_FOUND, $e->getMessage());
        }

        // Test Normal
        $seeder = \HotelSeeder::getSeeder([
            'id'         => 1,
            'country_id' => 1
        ]);

        $this->repoMock->shouldReceive('getByUrlId')
            ->once()
            ->andReturn(new Hotel($seeder));

        $this->locationMock->shouldReceive('getCityInfo')
            ->once()
            ->andReturn([
                'country' => [
                    'id' => 1,
                    'name' => [
                        'origin' => '',
                        'en' => '',
                        'tw' => '',
                    ]
                ],
                'city' => [
                    'id' => 1,
                    'name' => [
                        'origin' => '',
                        'en' => '',
                        'tw' => '',
                    ]
                ]
            ]);

        /** @var Hotel $actual */
        $actual = $this->target->getHotel($this->faker->regexify('[A-Z0-9]{6}'));
        $this->assertIsArray($actual);

        $location = $actual['location'];
        $this->assertIsString($location['address']);
        $this->assertIsArray($location['geo']);
        $this->assertIsArray($location['belong']);
        $this->assertArrayHasKey('lat', $location['geo']);
        $this->assertArrayHasKey('lng', $location['geo']);

    }
}