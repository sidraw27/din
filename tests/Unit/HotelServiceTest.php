<?php

namespace Tests\Unit;

use App\Elasticsearch\HotelEs;
use App\Entities\Hotel;
use App\Exceptions\HotelException;
use App\Repositories\HotelRepository;
use App\Services\Hotel\Facility;
use App\Services\Hotel\Location;
use App\Services\Hotel\Rating;
use App\Services\HotelService;
use Faker\Factory;
use Tests\TestCase;

/**
 * Class HotelServiceTest
 * @package Tests\Unit
 * @covers \App\Services\HotelService
 */
class HotelServiceTest extends TestCase
{
    /* @var $target HotelService */
    private $target;
    /* @var $esMock HotelEs */
    private $esMock;
    /* @var $repoMock HotelRepository */
    private $repoMock;
    /* @var $facilityMock Facility */
    private $facilityMock;
    /* @var $locationMock Location */
    private $locationMock;
    /* @var $ratingMock Rating */
    private $ratingMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->esMock       = \Mockery::mock(HotelEs::class);
        $this->repoMock     = \Mockery::mock(HotelRepository::class);
        $this->facilityMock = \Mockery::mock(Facility::class);
        $this->locationMock = \Mockery::mock(Location::class);
        $this->ratingMock   = \Mockery::mock(Rating::class);
        $this->target       = new HotelService($this->esMock, $this->repoMock, $this->locationMock, $this->facilityMock, $this->ratingMock);
        $this->faker        = Factory::create('en_US');
    }

    /**
     * @covers \App\Services\HotelService::getHotel
     */
    public function testGetHotel()
    {
        // Test Exception
        try {
            $this->target->getHotel($this->faker->regexify('[A-Z0-9]{5}'));
        } catch (HotelException $e) {
            $this->assertSame(HotelException::NOT_FOUND, $e->getMessage());
        }

        // Test Normal
        $seeder = \HotelSeeder::getSeeder([
            'id'         => 1,
            'country_id' => 1
        ]);

        $entity = new Hotel($seeder);
        $entity->setAttribute('id', 1);

        $this->repoMock->shouldReceive('getByUrlId')
            ->once()
            ->andReturn($entity);

        $this->locationMock->shouldReceive('getLocationInfo')
            ->once()
            ->andReturn([
                'country' => [
                    'id' => 1,
                    'name' => [
                        'origin' => '',
                        'en' => '',
                        'tw' => '',
                    ]
                ]
            ]);

        $this->facilityMock->shouldReceive('getHotelSupportFacilities')
            ->once()
            ->andReturn([
                '可使用語言' => [
                    [
                        'name' => '中文',
                        'icon' => null
                    ],
                    [
                        'name' => '英文',
                        'icon' => null
                    ]
                ]
            ]);

        $this->ratingMock->shouldReceive('getHotelRating')
            ->once()
            ->andReturn([
                'statistics' => [
                    'sum' => 0,
                    'avg' => 0.0
                ],
                'detail'     => []
            ]);

        /** @var Hotel $actual */
        $actual = $this->target->getHotel($this->faker->regexify('[A-Z0-9]{6}'));
        $this->assertIsArray($actual);

        $location = $actual['location'];
        $this->assertIsString($location['address']);
        $this->assertIsArray($location['geo']);
        $this->assertIsArray($location['belong']);
        $this->assertArrayHasKey('lat', $location['geo']);
        $this->assertArrayHasKey('lng', $location['geo']);
    }
    /**
     * @covers \App\Services\HotelService::formatHotelParameter
     */
    public function testFormatHotelParameter()
    {
        $actual = $this->target->formatHotelParameter([
            'checkIn'  => 'test',
            'adult'    => 1000000000,
            'testFail' => 'sds'
        ]);

        $this->assertIsArray($actual);
        $this->assertIsString($actual['target']);
        $this->assertIsInt($actual['adult']);
        $this->assertRegExp('/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/', $actual['checkIn']);
        $this->assertRegExp('/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/', $actual['checkOut']);
    }

}