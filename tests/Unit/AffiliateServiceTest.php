<?php

namespace Tests\Unit;

use App\Entities\Hotel;
use App\Entities\HotelAffiliate;
use App\Exceptions\ProviderException;
use App\Repositories\HotelAffiliateRepository;
use App\Repositories\HotelRepository;
use App\Services\Affiliate\Agoda;
use App\Services\Affiliate\AgodaPrice;
use App\Services\Affiliate\AffiliateService;
use Mockery\MockInterface;
use Tests\TestCase;

/**
 * Class AffiliateService
 * @package Tests\Unit
 * @covers \App\Services\Affiliate\AffiliateService
 */
class AffiliateServiceTest extends TestCase
{
    /* @var $target AffiliateService */
    private $target;
    /* @var $repoMock MockInterface */
    private $repoMock;
    /* @var $hotelRepoMock MockInterface */
    private $hotelRepoMock;
    /* @var $factoryMock MockInterface */
    private $factoryMock;
    /* @var $affiliateMock MockInterface */
    private $affiliateMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->repoMock      = \Mockery::mock(HotelAffiliateRepository::class);
        $this->hotelRepoMock = \Mockery::mock(HotelRepository::class);
        $this->target        = new AffiliateService($this->hotelRepoMock, $this->repoMock);
        $this->factoryMock   = \Mockery::mock('overload:\App\Services\Affiliate\Factory');
        $this->affiliateMock = \Mockery::mock(Agoda::class);
    }

    /**
     * @runInSeparateProcess
     * @covers \App\Services\Affiliate\AffiliateService::getPriceByProvider
     */
    public function testGetPriceByProvider()
    {
        // Test Exception
        try {
            $this->target->getPriceByProvider('', 1, '', '', 1);
        } catch (ProviderException $e) {
            $this->assertSame(ProviderException::NOT_FOUND, $e->getMessage());
        }

        // Test Normal
        $this->factoryMock->shouldReceive('make')
            ->once()
            ->andReturn($this->affiliateMock);

        $this->hotelRepoMock->shouldReceive('getByUrlId')
            ->andReturn(new Hotel([
                'id' => 1
            ]));

        $this->repoMock->shouldReceive('getByHotelId')
            ->andReturn(new HotelAffiliate([
                'hotel_id'         => 1,
                'agoda_hotel_id'   => 60395,
                'booking_hotel_id' => 1
            ]));

        $this->affiliateMock->shouldReceive('getRealTimePrice')
            ->andReturn(new AgodaPrice([
                'dailyRate'    => 100.0,
                'roomtypeName' => '雙人房',
                'landingURL'   => ''
            ]));

        $actual = $this->target->getPriceByProvider('agoda', 1, '', '', 1);

        $this->assertSame([
            'provider'   => 'agoda',
            'price'      => 100,
            'roomType'   => '雙人房',
            'landingUrl' => '',
            'extra'      => []
        ], $actual);
    }
}