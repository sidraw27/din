<?php

namespace Tests\Unit;

use App\Entities\User;
use App\Repositories\UserRepository;
use App\Services\User\Acl;
use App\Services\User\Auth;
use App\Services\UserService;
use Laravel\Socialite\Two\User as SocialiteUser;
use Tests\TestCase;

/**
 * Class UserServiceTest
 * @package Tests\Unit
 * @covers \App\Services\UserService
 */
class UserServiceTest extends TestCase
{
    /* @var $target UserService */
    private $target;
    /* @var $repoMock UserRepository */
    private $repoMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->repoMock = \Mockery::mock(UserRepository::class);
        $authMock = new Auth($this->repoMock);
        $aclMock  = \App::make(Acl::class);
        $this->target = new UserService($authMock, $aclMock);
    }

    /**
     * @covers \App\Services\UserService::login
     */
    public function testLogin()
    {
        $providerUserMock = \Mockery::mock(SocialiteUser::class);

        $userId = $this->faker->numberBetween(1, 100);
        $providerUserMock->shouldReceive('getId')
            ->andReturn($userId)
            ->shouldReceive('getEmail')
            ->andReturn($this->faker->unique()->safeEmail)
            ->shouldReceive('getName')
            ->andReturn($this->faker->name)
            ->shouldReceive('getAvatar')
            ->andReturn($this->faker->imageUrl());

        \Socialite::shouldReceive('driver->stateless->user')->andReturn($providerUserMock);

        $userMock = \Mockery::mock(User::class);
        $userMock->shouldReceive('getAttribute')
            ->withArgs(['id'])
            ->andReturn($userId);
        $this->repoMock->shouldReceive('getByProviderUserId')
            ->andReturn($userMock);

        \Auth::shouldReceive('loginUsingId')->andReturn($userMock);

        $this->assertTrue($this->target->login('facebook'));
    }
}
